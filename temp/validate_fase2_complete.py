#!/usr/bin/env python3
"""
Script de validaci√≥n completa para FASE 2 - Sistema de Reportes

Este script valida que todas las funcionalidades del sistema de reportes
est√©n implementadas correctamente y funcionen sin errores.

VALIDACIONES INCLUIDAS:
1. Importaci√≥n de m√≥dulos
2. Creaci√≥n de servicios
3. Generaci√≥n de reportes
4. Exportaci√≥n a PDF
5. Interfaz de usuario

Ejecutar desde el directorio ra√≠z del proyecto:
python temp/validate_fase2_complete.py
"""

import sys
import os
import traceback
from pathlib import Path
from datetime import date, timedelta
import tempfile
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# Agregar el directorio ra√≠z al path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_imports():
    """Prueba que todas las importaciones funcionen correctamente"""
    print("üîç VALIDANDO IMPORTACIONES")
    print("=" * 50)
    
    tests = [
        ("ReportService", "from services.report_service import ReportService"),
        ("PDFReportGenerator", "from reports.pdf_generator import PDFReportGenerator, generate_pdf_report"),
        ("ReportsForm", "from ui.forms.reports_form import ReportsForm"),
        ("Reportlab", "from reportlab.lib.pagesizes import A4"),
    ]
    
    for name, import_statement in tests:
        try:
            exec(import_statement)
            print(f"‚úÖ {name}: Importaci√≥n exitosa")
        except ImportError as e:
            print(f"‚ùå {name}: Error de importaci√≥n - {e}")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è {name}: Error general - {e}")
            return False
    
    print("\nüéâ Todas las importaciones exitosas")
    return True

def test_report_service():
    """Prueba la funcionalidad del ReportService"""
    print("\nüìä VALIDANDO REPORTSERVICE")
    print("=" * 50)
    
    try:
        from services.report_service import ReportService
        
        # Crear servicio con BD temporal
        db_path = ":memory:"
        service = ReportService(db_path)
        print("‚úÖ ReportService creado exitosamente")
        
        # Probar m√©todo de estad√≠sticas (que no requiere datos)
        try:
            stats = service.get_summary_statistics()
            print(f"‚úÖ Estad√≠sticas obtenidas: {len(stats)} m√©tricas")
        except Exception as e:
            print(f"‚ö†Ô∏è Error en estad√≠sticas: {e}")
        
        # Probar generaci√≥n de reporte de inventario (sin datos)
        try:
            report = service.generate_inventory_report()
            assert 'data' in report
            assert 'summary' in report
            assert 'generated_at' in report
            print("‚úÖ Reporte de inventario generado correctamente")
        except Exception as e:
            print(f"‚ö†Ô∏è Error en reporte de inventario: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en ReportService: {e}")
        traceback.print_exc()
        return False

def test_pdf_generation():
    """Prueba la generaci√≥n de PDFs"""
    print("\nüìÑ VALIDANDO GENERACI√ìN DE PDFs")
    print("=" * 50)
    
    try:
        from reports.pdf_generator import generate_pdf_report
        
        # Datos de prueba para PDF
        test_report_data = {
            'data': [
                {
                    'id_producto': 1,
                    'nombre': 'Producto Test',
                    'categoria': 'Test Category',
                    'stock_actual': 10,
                    'costo_unitario': 5.50,
                    'valor_total': 55.00
                }
            ],
            'summary': {
                'total_productos': 1,
                'productos_con_stock': 1,
                'productos_sin_stock': 0,
                'valor_total_inventario': 55.00,
                'fecha_corte': date.today().isoformat()
            },
            'generated_at': '2025-06-25T10:00:00',
            'filters_applied': {}
        }
        
        # Crear archivo temporal para PDF
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp:
            pdf_path = tmp.name
        
        try:
            # Generar PDF de prueba
            success = generate_pdf_report(
                report_data=test_report_data,
                pdf_path=pdf_path,
                report_type='inventory'
            )
            
            if success and os.path.exists(pdf_path):
                file_size = os.path.getsize(pdf_path)
                print(f"‚úÖ PDF generado exitosamente ({file_size} bytes)")
                
                # Verificar que es un PDF v√°lido
                with open(pdf_path, 'rb') as f:
                    header = f.read(8)
                    if header.startswith(b'%PDF'):
                        print("‚úÖ PDF v√°lido - Encabezado correcto")
                    else:
                        print("‚ö†Ô∏è PDF posiblemente inv√°lido - Encabezado incorrecto")
                
                return True
            else:
                print("‚ùå Error generando PDF")
                return False
                
        finally:
            # Limpiar archivo temporal
            if os.path.exists(pdf_path):
                os.unlink(pdf_path)
        
    except Exception as e:
        print(f"‚ùå Error en generaci√≥n de PDF: {e}")
        traceback.print_exc()
        return False

def test_integration():
    """Prueba la integraci√≥n entre ReportService y PDFGenerator"""
    print("\nüîó VALIDANDO INTEGRACI√ìN COMPLETA")
    print("=" * 50)
    
    try:
        from services.report_service import ReportService
        
        # Crear servicio
        service = ReportService(":memory:")
        
        # Generar reporte
        report_data = service.generate_inventory_report()
        
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp:
            pdf_path = tmp.name
        
        try:
            # Exportar a PDF usando el m√©todo integrado
            success = service.export_to_pdf(
                report_data=report_data,
                pdf_path=pdf_path,
                report_type='inventory'
            )
            
            if success and os.path.exists(pdf_path):
                print("‚úÖ Integraci√≥n ReportService -> PDF exitosa")
                return True
            else:
                print("‚ùå Error en integraci√≥n")
                return False
                
        finally:
            if os.path.exists(pdf_path):
                os.unlink(pdf_path)
                
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n: {e}")
        traceback.print_exc()
        return False

def test_ui_creation():
    """Prueba que la interfaz de reportes se pueda crear"""
    print("\nüñ•Ô∏è VALIDANDO INTERFAZ DE USUARIO")
    print("=" * 50)
    
    try:
        # Importar sin crear ventana real
        from ui.forms.reports_form import ReportsForm
        
        # Crear instancia (sin mostrar)
        reports_form = ReportsForm(parent=None, db_path=":memory:")
        
        print("‚úÖ ReportsForm creado exitosamente")
        
        # Validar que tiene los m√©todos esperados
        expected_methods = [
            '_generate_inventory_report',
            '_generate_movements_report', 
            '_generate_sales_report',
            '_generate_profitability_report',
            '_export_to_pdf'
        ]
        
        for method in expected_methods:
            if hasattr(reports_form, method):
                print(f"‚úÖ M√©todo {method} presente")
            else:
                print(f"‚ùå M√©todo {method} faltante")
                return False
        
        print("‚úÖ Interfaz de reportes validada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en interfaz: {e}")
        traceback.print_exc()
        return False

def test_main_window_integration():
    """Prueba que el MainWindow tenga integrado el sistema de reportes"""
    print("\nüè† VALIDANDO INTEGRACI√ìN CON MAINWINDOW")
    print("=" * 50)
    
    try:
        from ui.main.main_window import MainWindow
        
        # Verificar que tiene los m√©todos de reportes
        expected_methods = [
            '_open_reports_system',
            '_open_inventory_report_direct',
            '_open_sales_report_direct',
            '_open_movements_report_direct',
            '_open_profitability_report_direct'
        ]
        
        for method in expected_methods:
            if hasattr(MainWindow, method):
                print(f"‚úÖ M√©todo {method} presente en MainWindow")
            else:
                print(f"‚ùå M√©todo {method} faltante en MainWindow")
                return False
        
        print("‚úÖ Integraci√≥n con MainWindow validada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error validando MainWindow: {e}")
        traceback.print_exc()
        return False

def run_all_tests():
    """Ejecuta todas las pruebas de validaci√≥n"""
    print("üß™ VALIDACI√ìN COMPLETA - FASE 2: SISTEMA DE REPORTES")
    print("=" * 60)
    
    tests = [
        ("Importaciones", test_imports),
        ("ReportService", test_report_service),
        ("Generaci√≥n PDF", test_pdf_generation),
        ("Integraci√≥n", test_integration),
        ("Interfaz Usuario", test_ui_creation),
        ("MainWindow", test_main_window_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"\nüí• Error ejecutando {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VALIDACI√ìN")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ EXITOSO" if result else "‚ùå FALL√ì"
        print(f"{test_name:<20} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado final: {passed}/{total} pruebas exitosas")
    
    if passed == total:
        print("\nüéâ ¬°FASE 2 VALIDADA COMPLETAMENTE!")
        print("‚úÖ Sistema de Reportes listo para producci√≥n")
        print("\nFuncionalidades implementadas:")
        print("‚Ä¢ ReportService con 4 tipos de reportes")
        print("‚Ä¢ Generaci√≥n profesional de PDFs")
        print("‚Ä¢ Interfaz de usuario completa")
        print("‚Ä¢ Integraci√≥n con MainWindow")
        print("‚Ä¢ Exportaci√≥n con formato corporativo")
    else:
        print(f"\n‚ö†Ô∏è FASE 2 INCOMPLETA: {total - passed} prueba(s) fallaron")
        print("Revisar errores antes de proceder a producci√≥n")
    
    return passed == total

if __name__ == "__main__":
    try:
        # Cambiar al directorio del proyecto
        os.chdir(project_root)
        
        # Ejecutar validaci√≥n completa
        success = run_all_tests()
        
        # C√≥digo de salida
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Validaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error fatal durante validaci√≥n: {e}")
        traceback.print_exc()
        sys.exit(1)
