#!/usr/bin/env python3
"""
Verificaci√≥n b√°sica y r√°pida de correcciones implementadas.

Script simple que no requiere pytest, solo Python est√°ndar.
Valida que las correcciones b√°sicas funcionan.

Uso: python simple_check.py
"""

import sys
import os
from pathlib import Path


def simple_check():
    """Verificaci√≥n simple de correcciones."""
    print("üîç VERIFICACI√ìN SIMPLE DE CORRECCIONES")
    print("=" * 50)
    
    # Detectar directorio src
    current_dir = Path.cwd()
    src_dir = None
    
    if (current_dir / 'src').exists():
        src_dir = current_dir / 'src'
    elif (current_dir.parent / 'src').exists():
        src_dir = current_dir.parent / 'src'
    else:
        print("‚ùå ERROR: No se encuentra directorio 'src'")
        print("   Ejecute desde el directorio ra√≠z del proyecto")
        return False
    
    print(f"üìÅ Directorio src: {src_dir}")
    
    # Agregar src al path
    sys.path.insert(0, str(src_dir))
    
    errors = 0
    
    # Test 1: Verificar imports b√°sicos
    print("\n1Ô∏è‚É£ Verificando imports b√°sicos...")
    try:
        from models.venta import Venta
        print("   ‚úÖ models.venta importado correctamente")
    except Exception as e:
        print(f"   ‚ùå Error importando models.venta: {e}")
        errors += 1
    
    try:
        from services.sales_service import SalesService
        print("   ‚úÖ services.sales_service importado correctamente")
    except Exception as e:
        print(f"   ‚ùå Error importando services.sales_service: {e}")
        errors += 1
    
    # Test 2: Verificar m√©todo get() en Venta
    print("\n2Ô∏è‚É£ Verificando m√©todo Venta.get()...")
    try:
        venta = Venta(responsable="test_user", id_cliente=123)
        
        # Verificar que m√©todo existe
        if not hasattr(venta, 'get'):
            print("   ‚ùå ERROR: Venta no tiene m√©todo get()")
            errors += 1
        else:
            print("   ‚úÖ M√©todo get() existe")
            
            # Verificar funcionamiento b√°sico
            responsable = venta.get('responsable')
            if responsable == "test_user":
                print("   ‚úÖ get() retorna valores correctos")
            else:
                print(f"   ‚ùå ERROR: get() retorn√≥ '{responsable}', esperado 'test_user'")
                errors += 1
            
            # Verificar default value
            missing = venta.get('missing_attr', 'default')
            if missing == 'default':
                print("   ‚úÖ get() maneja valores por defecto correctamente")
            else:
                print(f"   ‚ùå ERROR: get() con default retorn√≥ '{missing}', esperado 'default'")
                errors += 1
                
    except Exception as e:
        print(f"   ‚ùå ERROR: Fallo al probar Venta.get(): {e}")
        errors += 1
    
    # Test 3: Verificar m√©todo obtener_detalles_venta en SalesService
    print("\n3Ô∏è‚É£ Verificando SalesService.obtener_detalles_venta()...")
    try:
        # Verificar que m√©todo existe (sin ejecutarlo)
        if hasattr(SalesService, 'obtener_detalles_venta'):
            print("   ‚úÖ M√©todo obtener_detalles_venta existe")
        else:
            print("   ‚ùå ERROR: SalesService no tiene m√©todo obtener_detalles_venta")
            errors += 1
            
    except Exception as e:
        print(f"   ‚ùå ERROR: Fallo al verificar SalesService: {e}")
        errors += 1
    
    # Test 4: Verificar estructura de archivos cr√≠ticos
    print("\n4Ô∏è‚É£ Verificando archivos cr√≠ticos...")
    critical_files = [
        'models/venta.py',
        'services/sales_service.py',
        'ui/forms/sales_form.py'
    ]
    
    for file_path in critical_files:
        full_path = src_dir / file_path
        if full_path.exists():
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - NO ENCONTRADO")
            errors += 1
    
    # Resumen final
    print("\n" + "=" * 50)
    if errors == 0:
        print("üéâ VERIFICACI√ìN EXITOSA")
        print("   Todas las correcciones b√°sicas funcionan correctamente")
        print("   Sistema listo para pruebas m√°s exhaustivas")
        return True
    else:
        print(f"üö® VERIFICACI√ìN FALLIDA - {errors} errores encontrados")
        print("   Revisar e implementar correcciones faltantes")
        print("   Ejecutar scripts completos para m√°s detalles")
        return False


if __name__ == '__main__':
    print("VERIFICACI√ìN SIMPLE - CORRECCIONES SALES_FORM.PY")
    print("Verificaci√≥n r√°pida sin dependencias externas")
    print()
    
    try:
        success = simple_check()
        
        print("\nüìã PR√ìXIMOS PASOS:")
        if success:
            print("   1. Ejecutar validate_corrections.bat para validaci√≥n completa")
            print("   2. Ejecutar tests exhaustivos con pytest")
            print("   3. Probar funcionalidad en interfaz real")
        else:
            print("   1. Revisar errores mostrados arriba")
            print("   2. Implementar correcciones faltantes")
            print("   3. Ejecutar esta verificaci√≥n nuevamente")
        
        print(f"\n‚è∞ Verificaci√≥n completada")
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Verificaci√≥n cancelada por usuario")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• ERROR CR√çTICO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(2)
