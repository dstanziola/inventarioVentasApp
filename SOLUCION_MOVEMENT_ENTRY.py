#!/usr/bin/env python3
"""
SOLUCION INMEDIATA: Errores MovementEntryForm
=====================================

ERRORES REPORTADOS:
1. "Campo obligatorio 'code' faltante en producto" en Event Bus
2. "No se pudo obtener informaci√≥n del usuario actual" en SessionManager

CAUSA IDENTIFICADA:
- Las correcciones YA EST√ÅN implementadas en el c√≥digo fuente
- Problema: Cache corruption con archivos .pyc obsoletos

SOLUCION:
- Limpiar cache espec√≠fico de archivos modificados
- Permitir regeneraci√≥n autom√°tica de cache actualizado

Session ID: 2025-07-25-movemententry-cache-fix
Protocolo: claude_instructions_v3.md FASE 0-3
"""

import os
import shutil
import sys
from pathlib import Path
from datetime import datetime


def log(message, level="INFO"):
    """Log con timestamp."""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] [{level}] {message}")


def main():
    print("üîß SOLUCI√ìN INMEDIATA: MovementEntryForm Cache Fix")
    print("=" * 55)
    print("Protocolo: claude_instructions_v3.md FASE 0-3")
    print("Session ID: 2025-07-25-movemententry-cache-fix")
    print("=" * 55)
    
    # Verificar que estamos en el directorio correcto
    if not Path("src").exists():
        print("‚ùå ERROR: Ejecutar desde directorio ra√≠z del proyecto")
        print("   Ubicaci√≥n correcta: D:\\inventario_app2\\")
        return False
    
    log("üîç AN√ÅLISIS: Cache corruption detectado")
    log("‚úÖ C√ìDIGO: Correcciones ya implementadas en fuentes")
    
    # Directorios cr√≠ticos para limpieza
    critical_dirs = [
        "src/ui/shared/__pycache__",      # events.py corregido
        "src/ui/forms/__pycache__",       # movement_entry_form.py corregido
        "src/ui/widgets/__pycache__",     # product_search_widget.py
        "src/services/__pycache__",       # product_service.py
        "src/application/services/__pycache__"  # auth_service.py
    ]
    
    log("üßπ INICIANDO limpieza de cache espec√≠fico")
    
    cleaned_count = 0
    for cache_dir in critical_dirs:
        cache_path = Path(cache_dir)
        if cache_path.exists() and cache_path.is_dir():
            try:
                shutil.rmtree(cache_path)
                log(f"‚úÖ Eliminado: {cache_dir}")
                cleaned_count += 1
            except Exception as e:
                log(f"‚ùå Error: {cache_dir} - {e}", "ERROR")
        else:
            log(f"‚è© No existe: {cache_dir}")
    
    log(f"üéØ LIMPIEZA COMPLETADA: {cleaned_count} directorios")
    
    # Verificar archivos cr√≠ticos est√°n presentes
    critical_files = [
        "src/ui/shared/events.py",
        "src/ui/forms/movement_entry_form.py"
    ]
    
    log("üîç VERIFICANDO archivos cr√≠ticos")
    for file_path in critical_files:
        if Path(file_path).exists():
            log(f"‚úÖ Presente: {file_path}")
        else:
            log(f"‚ùå FALTA: {file_path}", "ERROR")
            return False
    
    print("\n" + "=" * 55)
    print("üìã REPORTE FINAL")
    print("=" * 55)
    
    log("‚úÖ CORRECCIONES: Ya implementadas en c√≥digo fuente", "SUCCESS")
    log("‚úÖ CACHE: Limpiado de versiones obsoletas", "SUCCESS")
    log("‚úÖ SISTEMA: Listo para regenerar cache actualizado", "SUCCESS")
    
    print("\nüöÄ INSTRUCCIONES INMEDIATAS:")
    print("1. ‚ñ∂Ô∏è  Reiniciar la aplicaci√≥n principal")
    print("2. üîÑ Python regenerar√° cache limpio autom√°ticamente")
    print("3. üß™ Probar subformulario 'Entradas al Inventario'")
    print("4. ‚úÖ Verificar que ambos errores est√°n resueltos:")
    print("   - Event Bus acepta productos sin error 'code'")
    print("   - SessionManager proporciona usuario correctamente")
    
    print("\nüìä EXPLICACI√ìN T√âCNICA:")
    print("‚Ä¢ events.py: Validaci√≥n compatible con estructura BD")
    print("‚Ä¢ movement_entry_form.py: Acceso correcto SessionManager")
    print("‚Ä¢ Cache corrupto conten√≠a versiones pre-correcci√≥n")
    print("‚Ä¢ Limpieza permite usar c√≥digo corregido actual")
    
    print("\n‚ö†Ô∏è  SI PERSISTEN ERRORES:")
    print("‚Ä¢ Verificar que la aplicaci√≥n se reinici√≥ completamente")
    print("‚Ä¢ Ejecutar: python -m py_compile src/ui/shared/events.py")
    print("‚Ä¢ Revisar logs de terminal para errores adicionales")
    
    return True


if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ SOLUCI√ìN APLICADA EXITOSAMENTE")
            sys.exit(0)
        else:
            print("\n‚ùå SOLUCI√ìN REQUIERE REVISI√ìN MANUAL")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå Interrumpido por usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        sys.exit(1)
