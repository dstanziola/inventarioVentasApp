"""
CORRECCIONES CR√çTICAS TDD - FASE 5A
===================================

Script de correcciones cr√≠ticas implementado siguiendo metodolog√≠a TDD estricta.
Las correcciones se aplican DESPU√âS de escribir el test de validaci√≥n.

OBJETIVOS:
1. Instalar psutil para tests de performance  
2. Corregir imports DatabaseConnectionConnection ‚Üí DatabaseConnection
3. Validar que todas las correcciones funcionen correctamente
4. Mantener integridad del sistema

Autor: Sistema de Inventario Copy Point S.A.
Fecha: Julio 4, 2025 - TDD Correcciones Cr√≠ticas
Protocolo: TDD estricto - Correcciones basadas en tests fallidos
"""

import os
import sys
import subprocess
import tempfile
import shutil
from typing import List, Tuple, Dict, Any, Optional
import re

class CriticalFixesTDD:
    """Aplicador de correcciones cr√≠ticas siguiendo metodolog√≠a TDD."""
    
    def __init__(self, project_root: str = "D:\\inventario_app2"):
        """
        Inicializar corrector TDD.
        
        Args:
            project_root: Ruta ra√≠z del proyecto
        """
        self.project_root = project_root
        self.fixes_applied = []
        self.errors_found = []
        
        print(f"üîß === CORRECCIONES CR√çTICAS TDD ===")
        print(f"üìÅ Proyecto: {project_root}")
        print(f"üéØ Metodolog√≠a: Test-Driven Development")
    
    def fix_01_install_psutil_dependency(self) -> bool:
        """
        Correcci√≥n 1: Instalar psutil para tests de performance.
        
        Returns:
            True si la instalaci√≥n fue exitosa
        """
        print(f"\n1Ô∏è‚É£ CORRECCI√ìN TDD: Instalando psutil...")
        
        try:
            # Intentar importar primero para ver si ya est√° instalado
            import psutil
            print(f"   ‚úÖ psutil ya est√° instalado")
            return True
            
        except ImportError:
            print(f"   üì¶ psutil no encontrado, instalando...")
            
            try:
                # Instalar psutil usando pip
                result = subprocess.run([
                    sys.executable, '-m', 'pip', 'install', 'psutil'
                ], capture_output=True, text=True, check=True)
                
                print(f"   ‚úÖ psutil instalado exitosamente")
                self.fixes_applied.append("Instalaci√≥n de psutil")
                
                # Verificar instalaci√≥n
                import psutil
                print(f"   ‚úÖ Verificaci√≥n: psutil importa correctamente")
                
                return True
                
            except subprocess.CalledProcessError as e:
                error_msg = f"Error instalando psutil: {e.stderr}"
                print(f"   ‚ùå {error_msg}")
                self.errors_found.append(error_msg)
                return False
            except ImportError as e:
                error_msg = f"Error verificando instalaci√≥n de psutil: {e}"
                print(f"   ‚ùå {error_msg}")
                self.errors_found.append(error_msg)
                return False
    
    def fix_02_correct_database_connection_imports(self) -> bool:
        """
        Correcci√≥n 2: Corregir imports DatabaseConnectionConnection ‚Üí DatabaseConnection.
        
        Returns:
            True si todas las correcciones fueron exitosas
        """
        print(f"\n2Ô∏è‚É£ CORRECCI√ìN TDD: Corrigiendo imports DatabaseConnection...")
        
        # Archivos que pueden tener el error
        test_files_to_check = [
            'tests/test_fase2_validation.py',
            'tests/test_sales_service_optimization.py', 
            'tests/test_fase3_optimization.py',
            'tests/test_database_connection_evaluation.py'
        ]
        
        files_corrected = 0
        
        for file_path in test_files_to_check:
            full_path = os.path.join(self.project_root, file_path)
            
            if not os.path.exists(full_path):
                print(f"   ‚ö†Ô∏è Archivo no encontrado: {file_path}")
                continue
            
            try:
                # Leer archivo
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Verificar si contiene el error
                if 'DatabaseConnectionConnection' in content:
                    print(f"   üîç Corrigiendo imports en: {file_path}")
                    
                    # Crear backup
                    backup_path = full_path + '.backup'
                    shutil.copy2(full_path, backup_path)
                    
                    # Aplicar correcci√≥n
                    corrected_content = content.replace(
                        'DatabaseConnectionConnection', 
                        'DatabaseConnection'
                    )
                    
                    # Escribir archivo corregido
                    with open(full_path, 'w', encoding='utf-8') as f:
                        f.write(corrected_content)
                    
                    print(f"   ‚úÖ Corregido: {file_path}")
                    files_corrected += 1
                    
                else:
                    print(f"   ‚úÖ No requiere correcci√≥n: {file_path}")
                    
            except Exception as e:
                error_msg = f"Error procesando {file_path}: {e}"
                print(f"   ‚ùå {error_msg}")
                self.errors_found.append(error_msg)
        
        if files_corrected > 0:
            self.fixes_applied.append(f"Correcci√≥n imports DatabaseConnection ({files_corrected} archivos)")
            print(f"   üìä Total archivos corregidos: {files_corrected}")
        
        return True
    
    def fix_03_validate_all_critical_imports(self) -> bool:
        """
        Correcci√≥n 3: Validar que todos los imports cr√≠ticos funcionen.
        
        Returns:
            True si todas las validaciones pasaron
        """
        print(f"\n3Ô∏è‚É£ CORRECCI√ìN TDD: Validando imports cr√≠ticos...")
        
        critical_imports = [
            ('src.db.database', 'DatabaseConnection'),
            ('src.services.product_service', 'ProductService'),
            ('src.services.category_service', 'CategoryService'),
            ('src.services.client_service', 'ClientService'),
            ('src.services.sales_service', 'SalesService'),
        ]
        
        all_valid = True
        
        for module_name, class_name in critical_imports:
            try:
                # Cambiar al directorio del proyecto para imports
                old_cwd = os.getcwd()
                os.chdir(self.project_root)
                
                # Intentar importar
                module = __import__(module_name, fromlist=[class_name])
                service_class = getattr(module, class_name)
                
                print(f"   ‚úÖ {module_name}.{class_name}")
                
                # Restaurar directorio
                os.chdir(old_cwd)
                
            except Exception as e:
                print(f"   ‚ùå {module_name}.{class_name}: {e}")
                self.errors_found.append(f"Import fallido: {module_name}.{class_name}")
                all_valid = False
                
                # Restaurar directorio en caso de error
                os.chdir(old_cwd)
        
        if all_valid:
            self.fixes_applied.append("Validaci√≥n imports cr√≠ticos exitosa")
        
        return all_valid
    
    def fix_04_test_database_connection_functionality(self) -> bool:
        """
        Correcci√≥n 4: Probar funcionalidad de DatabaseConnection.
        
        Returns:
            True si la funcionalidad es correcta
        """
        print(f"\n4Ô∏è‚É£ CORRECCI√ìN TDD: Probando funcionalidad DatabaseConnection...")
        
        try:
            # Cambiar al directorio del proyecto
            old_cwd = os.getcwd()
            os.chdir(self.project_root)
            
            # Importar DatabaseConnection
            from src.db.database import DatabaseConnection
            
            # Crear BD temporal
            temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='.db')
            temp_db.close()
            
            try:
                # Test instanciaci√≥n
                db_conn = DatabaseConnection(temp_db.name)
                print(f"   ‚úÖ Instanciaci√≥n exitosa")
                
                # Test conexi√≥n
                connection = db_conn.get_connection()
                self.assertIsNotNone(connection)
                print(f"   ‚úÖ Conexi√≥n exitosa")
                
                # Test creaci√≥n de tablas
                db_conn.create_tables()
                print(f"   ‚úÖ Creaci√≥n de tablas exitosa")
                
                # Test integridad
                integrity = db_conn.verify_schema_integrity()
                if integrity:
                    print(f"   ‚úÖ Integridad de schema validada")
                else:
                    print(f"   ‚ö†Ô∏è Problema con integridad de schema")
                
                # Cerrar conexi√≥n
                db_conn.close()
                print(f"   ‚úÖ Cierre de conexi√≥n exitoso")
                
                self.fixes_applied.append("Funcionalidad DatabaseConnection validada")
                
                return True
                
            finally:
                # Limpiar archivo temporal
                if os.path.exists(temp_db.name):
                    os.unlink(temp_db.name)
                
                # Restaurar directorio
                os.chdir(old_cwd)
                
        except Exception as e:
            error_msg = f"Error probando DatabaseConnection: {e}"
            print(f"   ‚ùå {error_msg}")
            self.errors_found.append(error_msg)
            os.chdir(old_cwd)
            return False
    
    def assertIsNotNone(self, value):
        """Helper para validaci√≥n."""
        if value is None:
            raise AssertionError("Value is None")
    
    def fix_05_validate_pytest_can_collect_tests(self) -> bool:
        """
        Correcci√≥n 5: Validar que pytest puede recolectar tests sin errores.
        
        Returns:
            True si pytest puede recolectar tests correctamente
        """
        print(f"\n5Ô∏è‚É£ CORRECCI√ìN TDD: Validando recolecci√≥n de tests por pytest...")
        
        try:
            # Cambiar al directorio del proyecto
            old_cwd = os.getcwd()
            os.chdir(self.project_root)
            
            # Ejecutar pytest --collect-only en tests cr√≠ticos
            result = subprocess.run([
                sys.executable, '-m', 'pytest', 
                '--collect-only', '-q',
                'tests/test_fase2_validation.py'
            ], capture_output=True, text=True)
            
            # Restaurar directorio
            os.chdir(old_cwd)
            
            if result.returncode == 0:
                print(f"   ‚úÖ pytest puede recolectar tests correctamente")
                self.fixes_applied.append("Validaci√≥n pytest collection exitosa")
                return True
            else:
                error_msg = f"pytest collection fall√≥: {result.stderr}"
                print(f"   ‚ùå {error_msg}")
                self.errors_found.append(error_msg)
                return False
                
        except Exception as e:
            error_msg = f"Error ejecutando pytest: {e}"
            print(f"   ‚ùå {error_msg}")
            self.errors_found.append(error_msg)
            os.chdir(old_cwd)
            return False
    
    def run_all_critical_fixes(self) -> bool:
        """
        Ejecutar todas las correcciones cr√≠ticas en orden.
        
        Returns:
            True si todas las correcciones fueron exitosas
        """
        print(f"\nüîß EJECUTANDO TODAS LAS CORRECCIONES TDD...")
        print(f"="*60)
        
        # Lista de correcciones en orden
        fixes = [
            self.fix_01_install_psutil_dependency,
            self.fix_02_correct_database_connection_imports, 
            self.fix_03_validate_all_critical_imports,
            self.fix_04_test_database_connection_functionality,
            self.fix_05_validate_pytest_can_collect_tests
        ]
        
        # Ejecutar correcciones
        successful_fixes = 0
        for fix_func in fixes:
            try:
                success = fix_func()
                if success:
                    successful_fixes += 1
            except Exception as e:
                error_msg = f"Error ejecutando {fix_func.__name__}: {e}"
                print(f"‚ùå {error_msg}")
                self.errors_found.append(error_msg)
        
        # Generar reporte
        self.generate_fixes_report()
        
        return successful_fixes == len(fixes)
    
    def generate_fixes_report(self):
        """Generar reporte de correcciones aplicadas."""
        print(f"\nüìä === REPORTE DE CORRECCIONES TDD ===")
        print(f"="*60)
        
        print(f"‚úÖ CORRECCIONES APLICADAS ({len(self.fixes_applied)}):")
        for fix in self.fixes_applied:
            print(f"   ‚Ä¢ {fix}")
        
        if self.errors_found:
            print(f"\n‚ùå ERRORES ENCONTRADOS ({len(self.errors_found)}):")
            for error in self.errors_found:
                print(f"   ‚Ä¢ {error}")
        
        success_rate = len(self.fixes_applied) / (len(self.fixes_applied) + len(self.errors_found)) * 100 if (len(self.fixes_applied) + len(self.errors_found)) > 0 else 0
        
        print(f"\nüìà TASA DE √âXITO: {success_rate:.1f}%")
        
        if success_rate >= 100:
            print(f"üéØ RESULTADO: TODAS LAS CORRECCIONES EXITOSAS")
            print(f"‚úÖ Sistema listo para ejecutar suite completa de tests")
        elif success_rate >= 80:
            print(f"‚ö†Ô∏è RESULTADO: CORRECCIONES MAYORMENTE EXITOSAS")  
            print(f"üîç Revisar errores antes de continuar")
        else:
            print(f"‚ùå RESULTADO: CORRECCIONES REQUIEREN ATENCI√ìN")
            print(f"üõ†Ô∏è Resolver errores antes de continuar")


def run_critical_fixes():
    """Funci√≥n principal para ejecutar correcciones cr√≠ticas."""
    fixer = CriticalFixesTDD()
    return fixer.run_all_critical_fixes()


if __name__ == '__main__':
    print("üöÄ Iniciando Correcciones Cr√≠ticas TDD...")
    success = run_critical_fixes()
    
    if success:
        print(f"\nüéâ CORRECCIONES COMPLETADAS EXITOSAMENTE")
        sys.exit(0)
    else:
        print(f"\n‚ö†Ô∏è CORRECCIONES COMPLETADAS CON ERRORES")
        sys.exit(1)
